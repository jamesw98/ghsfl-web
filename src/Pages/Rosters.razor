@page "/rosters"
@using GhsflUtils.Models
@using GhsflUtils.Services
@using GhsflUtils.Enums
@using GhsflUtils.Exceptions

@inject AuthProvider Auth 
@inject RosterService Roster
@inject RoundService Round
@inject CsvService Csv
@inject ISnackbar Snackbar
@inject IDialogService DialogService

<AuthorizeView>
    <NotAuthorized>
        <NotAuthorizedMessage/>
    </NotAuthorized>
    <Authorized>
        <MudContainer MaxWidth="MaxWidth.Large">
            <MudText Typo="Typo.h2">Submit rosters for @Auth.UserClub.Name</MudText>
            <br/>
            @if (_rounds.Any())
            {
                <MudPaper>
                    <MudTable Items="@_rounds" Breakpoint="Breakpoint.Md" Context="rosterContext">
                        <HeaderContent>
                            <MudTh>Round</MudTh>
                            <MudTh>Male</MudTh>
                            <MudTh>Upload Male</MudTh>
                            <MudTh>View</MudTh>
                            <MudTh>Female</MudTh>
                            <MudTh>Upload Female</MudTh>
                            <MudTh>View</MudTh>
                            <MudTh>Due By</MudTh>
                        </HeaderContent>
                        <RowTemplate>
                            <MudTd>@rosterContext.Description</MudTd>
                            <MudTd>
                                @if (_rosters.Any(x => x.Round == @rosterContext.RoundNumber && x.Gender == Genders.Male))
                                {
                                    <MudIcon Icon="@Icons.Material.Filled.Check" Color="Color.Success"/>
                                }
                                else
                                {
                                    <MudIcon Icon="@Icons.Material.Filled.Close" Color="Color.Error"/>
                                }
                            </MudTd>
                            <MudTd>
                                <MudFileUpload T="IBrowserFile" 
                                               FilesChanged="async file => { await SubmitRoster(file, rosterContext.RoundNumber, Genders.Male, rosterContext.SubmitByDate); }">
                                    <ButtonTemplate Context="uploadContext">
                                        <MudButton HtmlTag="label"
                                                   Variant="Variant.Filled"
                                                   Color="Color.Tertiary"
                                                   StartIcon="@Icons.Material.Filled.CloudUpload"
                                                   for="@uploadContext">
                                            @(_rosters.Any(x => x.Round == rosterContext.RoundNumber && x.Gender == Genders.Male) ? "Reupload" : "Upload")
                                        </MudButton>
                                    </ButtonTemplate>
                                </MudFileUpload>
                            </MudTd>
                            <MudTd>
                                <MudIconButton Icon="@Icons.Material.Filled.RemoveRedEye" Variant="Variant.Filled"
                                               OnClick="async () => { await ViewRoster(_rosters.First(x => x.Round == rosterContext.RoundNumber && x.Gender == Genders.Male).Id); }"
                                               Disabled="@(!_rosters.Any(x => x.Round == rosterContext.RoundNumber && x.Gender == Genders.Male))"/>
                            </MudTd>
                            <MudTd>
                                @if (_rosters.Any(x => x.Round == @rosterContext.RoundNumber && x.Gender == Genders.Female))
                                {
                                    <MudIcon Icon="@Icons.Material.Filled.Check" Color="Color.Success"/>
                                }
                                else
                                {
                                    <MudIcon Icon="@Icons.Material.Filled.Close" Color="Color.Error"/>
                                }
                            </MudTd>
                            <MudTd>
                                <MudFileUpload T="IBrowserFile" 
                                               FilesChanged="async file => { await SubmitRoster(file, rosterContext.RoundNumber, Genders.Female, rosterContext.SubmitByDate); }">
                                    <ButtonTemplate Context="uploadContext">
                                        <MudButton HtmlTag="label"
                                                   Variant="Variant.Filled"
                                                   Color="Color.Tertiary"
                                                   StartIcon="@Icons.Material.Filled.CloudUpload"
                                                   for="@uploadContext">
                                            @(_rosters.Any(x => x.Round == rosterContext.RoundNumber && x.Gender == Genders.Female) ? "Reupload" : "Upload")
                                        </MudButton>
                                    </ButtonTemplate>
                                </MudFileUpload>
                            </MudTd>
                            <MudTd>
                                <MudIconButton Icon="@Icons.Material.Filled.RemoveRedEye" Variant="Variant.Filled"
                                               OnClick="async () => { await ViewRoster(_rosters.First(x => x.Round == rosterContext.RoundNumber && x.Gender == Genders.Female).Id); }"
                                               Disabled="@(!_rosters.Any(x => x.Round == rosterContext.RoundNumber && x.Gender == Genders.Female))"/>
                            </MudTd>
                            <MudTd>@rosterContext.SubmitByDate</MudTd>
                        </RowTemplate>
                    </MudTable>
                </MudPaper>
            }
        </MudContainer>
    </Authorized>
</AuthorizeView>

@code {
    private List<Roster> _rosters = new();
    private List<Round> _rounds = new();

    protected override async Task OnInitializedAsync()
    {
        _rosters = await Roster.GetRostersForSchool();
        _rounds = await Round.GetRounds();
    }

    private async Task ViewRoster(long roundId)
    {
        var roster = await Roster.GetRoster(roundId);

        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Medium, FullWidth = true };

        var parameters = new DialogParameters();
        parameters.Add("Fencers", roster.Fencers);
        parameters.Add("RosterId", roster.Id);

        DialogService.Show<RosterDetailDialog>($"Roster Round {roundId}", parameters, options);
    }

    private async Task SubmitRoster(IBrowserFile file, long round, Genders gender, DateTime submitDeadline)
    {
        RosterSubmission submission;
        try
        {
            submission = await Csv.ReadRosterFile(file, gender, round);
        }
        catch (CsvHelper.HeaderValidationException)
        {
            Snackbar.Add("Error: could not read csv file, please check your header names", Severity.Error);
            return;
        }

        try
        {
            var newFencers = await Roster.UploadRoster(submission);
            Snackbar.Add($"Success! The following fencers were not already in the database and have been added:\n{string.Join(", ", newFencers)}", Severity.Success);
            
            if (DateTime.Now > submitDeadline)
                Snackbar.Add("This roster was been submitted past the deadline! If this has not been approved by the TC this roster will not be counted!", Severity.Error);
            
            StateHasChanged();
        }
        catch (JsonParseException e)
        {
            Snackbar.Add(e.Message, Severity.Error);
        }
        catch (ApiException e)
        {
            Snackbar.Add(e.Message, Severity.Error);
        }
    }

}